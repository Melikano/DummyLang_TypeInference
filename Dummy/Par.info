-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Dummy/Par.y
-----------------------------------------------------------------------------

state 37 contains 1 shift/reduce conflicts.
state 40 contains 1 shift/reduce conflicts.
state 60 contains 6 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 69 contains 6 shift/reduce conflicts.
state 76 contains 1 shift/reduce conflicts.
state 79 contains 6 shift/reduce conflicts.
state 83 contains 6 shift/reduce conflicts.
state 85 contains 1 shift/reduce conflicts.
state 89 contains 1 shift/reduce conflicts.
state 92 contains 6 shift/reduce conflicts.
state 103 contains 6 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProg -> Prog                               (0)
	%start_pListClassDec -> ListClassDec               (1)
	%start_pListInstDec -> ListInstDec                 (2)
	%start_pListExpr -> ListExpr                       (3)
	%start_pClassOpDec -> ClassOpDec                   (4)
	%start_pClassOpImp -> ClassOpImp                   (5)
	%start_pClassDec -> ClassDec                       (6)
	%start_pInstDec -> InstDec                         (7)
	%start_pListClassOpDec -> ListClassOpDec           (8)
	%start_pListClassOpImp -> ListClassOpImp           (9)
	%start_pExpr -> Expr                               (10)
	%start_pList -> List                               (11)
	%start_pOvType -> OvType                           (12)
	%start_pSType -> SType                             (13)
	UIdent -> L_UIdent                                 (14)
	LIdent -> L_LIdent                                 (15)
	True -> L_True                                     (16)
	False -> L_False                                   (17)
	Prog -> ListClassDec ListInstDec ListExpr          (18)
	ListClassDec ->                                    (19)
	ListClassDec -> ClassDec                           (20)
	ListClassDec -> ClassDec ';' ListClassDec          (21)
	ListInstDec ->                                     (22)
	ListInstDec -> InstDec ListInstDec                 (23)
	ListExpr ->                                        (24)
	ListExpr -> Expr ListExpr                          (25)
	ClassOpDec -> LIdent ':' SType                     (26)
	ClassOpImp -> LIdent '=' Expr                      (27)
	ClassDec -> 'class' UIdent LIdent 'where' ListClassOpDec   (28)
	InstDec -> 'instance' UIdent 'where' ListClassOpImp   (29)
	ListClassOpDec ->                                  (30)
	ListClassOpDec -> ClassOpDec ListClassOpDec        (31)
	ListClassOpImp ->                                  (32)
	ListClassOpImp -> ClassOpImp ListClassOpImp        (33)
	Expr -> LIdent '=' Expr                            (34)
	Expr -> '\\' LIdent '->' Expr                      (35)
	Expr -> LIdent                                     (36)
	Expr -> Expr Expr                                  (37)
	Expr -> List                                       (38)
	Expr -> 'case' Expr 'of' List '->' Expr ';' List '->' Expr   (39)
	Expr -> True                                       (40)
	Expr -> False                                      (41)
	List -> '[]'                                       (42)
	List -> LIdent ':' List                            (43)
	OvType -> '<' UIdent LIdent ',' '>' '=>' SType     (44)
	SType -> LIdent                                    (45)
	SType -> UIdent LIdent                             (46)
	SType -> 'Bool'                                    (47)
	SType -> SType '->' SType                          (48)
	SType -> '[' SType ']'                             (49)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	','            { PT _ (TS _ 1) }
	'->'           { PT _ (TS _ 2) }
	':'            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'<'            { PT _ (TS _ 5) }
	'='            { PT _ (TS _ 6) }
	'=>'           { PT _ (TS _ 7) }
	'>'            { PT _ (TS _ 8) }
	'Bool'         { PT _ (TS _ 9) }
	'['            { PT _ (TS _ 10) }
	'[]'           { PT _ (TS _ 11) }
	'\\'           { PT _ (TS _ 12) }
	']'            { PT _ (TS _ 13) }
	'case'         { PT _ (TS _ 14) }
	'class'        { PT _ (TS _ 15) }
	'instance'     { PT _ (TS _ 16) }
	'of'           { PT _ (TS _ 17) }
	'where'        { PT _ (TS _ 18) }
	L_UIdent       { PT _ (T_UIdent $$) }
	L_LIdent       { PT _ (T_LIdent $$) }
	L_True         { PT _ (T_True $$) }
	L_False        { PT _ (T_False $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProg    rule  0
	%start_pListClassDec rule  1
	%start_pListInstDec rule  2
	%start_pListExpr rule  3
	%start_pClassOpDec rule  4
	%start_pClassOpImp rule  5
	%start_pClassDec rule  6
	%start_pInstDec rule  7
	%start_pListClassOpDec rule  8
	%start_pListClassOpImp rule  9
	%start_pExpr    rule  10
	%start_pList    rule  11
	%start_pOvType  rule  12
	%start_pSType   rule  13
	UIdent          rule  14
	LIdent          rule  15
	True            rule  16
	False           rule  17
	Prog            rule  18
	ListClassDec    rules 19, 20, 21
	ListInstDec     rules 22, 23
	ListExpr        rules 24, 25
	ClassOpDec      rule  26
	ClassOpImp      rule  27
	ClassDec        rule  28
	InstDec         rule  29
	ListClassOpDec  rules 30, 31
	ListClassOpImp  rules 32, 33
	Expr            rules 34, 35, 36, 37, 38, 39, 40, 41
	List            rules 42, 43
	OvType          rule  44
	SType           rules 45, 46, 47, 48, 49

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProg -> . Prog                              (rule 0)

	'[]'           reduce using rule 19
	'\\'           reduce using rule 19
	'case'         reduce using rule 19
	'class'        shift, and enter state 45
	'instance'     reduce using rule 19
	L_LIdent       reduce using rule 19
	L_True         reduce using rule 19
	L_False        reduce using rule 19
	%eof           reduce using rule 19

	Prog           goto state 54
	ListClassDec   goto state 55
	ClassDec       goto state 53

State 1

	%start_pListClassDec -> . ListClassDec              (rule 1)

	'class'        shift, and enter state 45
	%eof           reduce using rule 19

	ListClassDec   goto state 52
	ClassDec       goto state 53

State 2

	%start_pListInstDec -> . ListInstDec                (rule 2)

	'instance'     shift, and enter state 43
	%eof           reduce using rule 22

	ListInstDec    goto state 50
	InstDec        goto state 51

State 3

	%start_pListExpr -> . ListExpr                      (rule 3)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35
	%eof           reduce using rule 24

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	ListExpr       goto state 48
	Expr           goto state 49
	List           goto state 31

State 4

	%start_pClassOpDec -> . ClassOpDec                  (rule 4)

	L_LIdent       shift, and enter state 21

	LIdent         goto state 39
	ClassOpDec     goto state 47

State 5

	%start_pClassOpImp -> . ClassOpImp                  (rule 5)

	L_LIdent       shift, and enter state 21

	LIdent         goto state 36
	ClassOpImp     goto state 46

State 6

	%start_pClassDec -> . ClassDec                      (rule 6)

	'class'        shift, and enter state 45

	ClassDec       goto state 44

State 7

	%start_pInstDec -> . InstDec                        (rule 7)

	'instance'     shift, and enter state 43

	InstDec        goto state 42

State 8

	%start_pListClassOpDec -> . ListClassOpDec          (rule 8)

	L_LIdent       shift, and enter state 21
	%eof           reduce using rule 30

	LIdent         goto state 39
	ClassOpDec     goto state 40
	ListClassOpDec goto state 41

State 9

	%start_pListClassOpImp -> . ListClassOpImp          (rule 9)

	L_LIdent       shift, and enter state 21
	%eof           reduce using rule 32

	LIdent         goto state 36
	ClassOpImp     goto state 37
	ListClassOpImp goto state 38

State 10

	%start_pExpr -> . Expr                              (rule 10)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 30
	List           goto state 31

State 11

	%start_pList -> . List                              (rule 11)

	'[]'           shift, and enter state 26
	L_LIdent       shift, and enter state 21

	LIdent         goto state 24
	List           goto state 25

State 12

	%start_pOvType -> . OvType                          (rule 12)

	'<'            shift, and enter state 23

	OvType         goto state 22

State 13

	%start_pSType -> . SType                            (rule 13)

	'Bool'         shift, and enter state 19
	'['            shift, and enter state 20
	L_UIdent       shift, and enter state 15
	L_LIdent       shift, and enter state 21

	UIdent         goto state 16
	LIdent         goto state 17
	SType          goto state 18

State 14

	UIdent -> . L_UIdent                                (rule 14)

	L_UIdent       shift, and enter state 15


State 15

	UIdent -> L_UIdent .                                (rule 14)

	'where'        reduce using rule 14
	L_LIdent       reduce using rule 14


State 16

	SType -> UIdent . LIdent                            (rule 46)

	L_LIdent       shift, and enter state 21

	LIdent         goto state 75

State 17

	SType -> LIdent .                                   (rule 45)

	'->'           reduce using rule 45
	';'            reduce using rule 45
	'[]'           reduce using rule 45
	'\\'           reduce using rule 45
	']'            reduce using rule 45
	'case'         reduce using rule 45
	'instance'     reduce using rule 45
	L_LIdent       reduce using rule 45
	L_True         reduce using rule 45
	L_False        reduce using rule 45
	%eof           reduce using rule 45


State 18

	%start_pSType -> SType .                            (rule 13)
	SType -> SType . '->' SType                         (rule 48)

	'->'           shift, and enter state 74
	%eof           accept


State 19

	SType -> 'Bool' .                                   (rule 47)

	'->'           reduce using rule 47
	';'            reduce using rule 47
	'[]'           reduce using rule 47
	'\\'           reduce using rule 47
	']'            reduce using rule 47
	'case'         reduce using rule 47
	'instance'     reduce using rule 47
	L_LIdent       reduce using rule 47
	L_True         reduce using rule 47
	L_False        reduce using rule 47
	%eof           reduce using rule 47


State 20

	SType -> '[' . SType ']'                            (rule 49)

	'Bool'         shift, and enter state 19
	'['            shift, and enter state 20
	L_UIdent       shift, and enter state 15
	L_LIdent       shift, and enter state 21

	UIdent         goto state 16
	LIdent         goto state 17
	SType          goto state 73

State 21

	LIdent -> L_LIdent .                                (rule 15)

	','            reduce using rule 15
	'->'           reduce using rule 15
	':'            reduce using rule 15
	';'            reduce using rule 15
	'='            reduce using rule 15
	'[]'           reduce using rule 15
	'\\'           reduce using rule 15
	']'            reduce using rule 15
	'case'         reduce using rule 15
	'instance'     reduce using rule 15
	'of'           reduce using rule 15
	'where'        reduce using rule 15
	L_LIdent       reduce using rule 15
	L_True         reduce using rule 15
	L_False        reduce using rule 15
	%eof           reduce using rule 15


State 22

	%start_pOvType -> OvType .                          (rule 12)

	%eof           accept


State 23

	OvType -> '<' . UIdent LIdent ',' '>' '=>' SType    (rule 44)

	L_UIdent       shift, and enter state 15

	UIdent         goto state 72

State 24

	List -> LIdent . ':' List                           (rule 43)

	':'            shift, and enter state 70


State 25

	%start_pList -> List .                              (rule 11)

	%eof           accept


State 26

	List -> '[]' .                                      (rule 42)

	'->'           reduce using rule 42
	';'            reduce using rule 42
	'[]'           reduce using rule 42
	'\\'           reduce using rule 42
	'case'         reduce using rule 42
	'instance'     reduce using rule 42
	'of'           reduce using rule 42
	L_LIdent       reduce using rule 42
	L_True         reduce using rule 42
	L_False        reduce using rule 42
	%eof           reduce using rule 42


State 27

	Expr -> LIdent . '=' Expr                           (rule 34)
	Expr -> LIdent .                                    (rule 36)
	List -> LIdent . ':' List                           (rule 43)

	':'            shift, and enter state 70
	';'            reduce using rule 36
	'='            shift, and enter state 71
	'[]'           reduce using rule 36
	'\\'           reduce using rule 36
	'case'         reduce using rule 36
	'instance'     reduce using rule 36
	'of'           reduce using rule 36
	L_LIdent       reduce using rule 36
	L_True         reduce using rule 36
	L_False        reduce using rule 36
	%eof           reduce using rule 36


State 28

	Expr -> True .                                      (rule 40)

	';'            reduce using rule 40
	'[]'           reduce using rule 40
	'\\'           reduce using rule 40
	'case'         reduce using rule 40
	'instance'     reduce using rule 40
	'of'           reduce using rule 40
	L_LIdent       reduce using rule 40
	L_True         reduce using rule 40
	L_False        reduce using rule 40
	%eof           reduce using rule 40


State 29

	Expr -> False .                                     (rule 41)

	';'            reduce using rule 41
	'[]'           reduce using rule 41
	'\\'           reduce using rule 41
	'case'         reduce using rule 41
	'instance'     reduce using rule 41
	'of'           reduce using rule 41
	L_LIdent       reduce using rule 41
	L_True         reduce using rule 41
	L_False        reduce using rule 41
	%eof           reduce using rule 41


State 30

	%start_pExpr -> Expr .                              (rule 10)
	Expr -> Expr . Expr                                 (rule 37)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35
	%eof           accept

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 69
	List           goto state 31

State 31

	Expr -> List .                                      (rule 38)

	';'            reduce using rule 38
	'[]'           reduce using rule 38
	'\\'           reduce using rule 38
	'case'         reduce using rule 38
	'instance'     reduce using rule 38
	'of'           reduce using rule 38
	L_LIdent       reduce using rule 38
	L_True         reduce using rule 38
	L_False        reduce using rule 38
	%eof           reduce using rule 38


State 32

	Expr -> '\\' . LIdent '->' Expr                     (rule 35)

	L_LIdent       shift, and enter state 21

	LIdent         goto state 68

State 33

	Expr -> 'case' . Expr 'of' List '->' Expr ';' List '->' Expr    (rule 39)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 67
	List           goto state 31

State 34

	True -> L_True .                                    (rule 16)

	';'            reduce using rule 16
	'[]'           reduce using rule 16
	'\\'           reduce using rule 16
	'case'         reduce using rule 16
	'instance'     reduce using rule 16
	'of'           reduce using rule 16
	L_LIdent       reduce using rule 16
	L_True         reduce using rule 16
	L_False        reduce using rule 16
	%eof           reduce using rule 16


State 35

	False -> L_False .                                  (rule 17)

	';'            reduce using rule 17
	'[]'           reduce using rule 17
	'\\'           reduce using rule 17
	'case'         reduce using rule 17
	'instance'     reduce using rule 17
	'of'           reduce using rule 17
	L_LIdent       reduce using rule 17
	L_True         reduce using rule 17
	L_False        reduce using rule 17
	%eof           reduce using rule 17


State 36

	ClassOpImp -> LIdent . '=' Expr                     (rule 27)

	'='            shift, and enter state 66


State 37

	ListClassOpImp -> ClassOpImp . ListClassOpImp       (rule 33)

	'[]'           reduce using rule 32
	'\\'           reduce using rule 32
	'case'         reduce using rule 32
	'instance'     reduce using rule 32
	L_LIdent       shift, and enter state 21
			(reduce using rule 32)

	L_True         reduce using rule 32
	L_False        reduce using rule 32
	%eof           reduce using rule 32

	LIdent         goto state 36
	ClassOpImp     goto state 37
	ListClassOpImp goto state 65

State 38

	%start_pListClassOpImp -> ListClassOpImp .          (rule 9)

	%eof           accept


State 39

	ClassOpDec -> LIdent . ':' SType                    (rule 26)

	':'            shift, and enter state 64


State 40

	ListClassOpDec -> ClassOpDec . ListClassOpDec       (rule 31)

	';'            reduce using rule 30
	'[]'           reduce using rule 30
	'\\'           reduce using rule 30
	'case'         reduce using rule 30
	'instance'     reduce using rule 30
	L_LIdent       shift, and enter state 21
			(reduce using rule 30)

	L_True         reduce using rule 30
	L_False        reduce using rule 30
	%eof           reduce using rule 30

	LIdent         goto state 39
	ClassOpDec     goto state 40
	ListClassOpDec goto state 63

State 41

	%start_pListClassOpDec -> ListClassOpDec .          (rule 8)

	%eof           accept


State 42

	%start_pInstDec -> InstDec .                        (rule 7)

	%eof           accept


State 43

	InstDec -> 'instance' . UIdent 'where' ListClassOpImp    (rule 29)

	L_UIdent       shift, and enter state 15

	UIdent         goto state 62

State 44

	%start_pClassDec -> ClassDec .                      (rule 6)

	%eof           accept


State 45

	ClassDec -> 'class' . UIdent LIdent 'where' ListClassOpDec    (rule 28)

	L_UIdent       shift, and enter state 15

	UIdent         goto state 61

State 46

	%start_pClassOpImp -> ClassOpImp .                  (rule 5)

	%eof           accept


State 47

	%start_pClassOpDec -> ClassOpDec .                  (rule 4)

	%eof           accept


State 48

	%start_pListExpr -> ListExpr .                      (rule 3)

	%eof           accept


State 49

	ListExpr -> Expr . ListExpr                         (rule 25)
	Expr -> Expr . Expr                                 (rule 37)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35
	%eof           reduce using rule 24

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	ListExpr       goto state 59
	Expr           goto state 60
	List           goto state 31

State 50

	%start_pListInstDec -> ListInstDec .                (rule 2)

	%eof           accept


State 51

	ListInstDec -> InstDec . ListInstDec                (rule 23)

	'[]'           reduce using rule 22
	'\\'           reduce using rule 22
	'case'         reduce using rule 22
	'instance'     shift, and enter state 43
	L_LIdent       reduce using rule 22
	L_True         reduce using rule 22
	L_False        reduce using rule 22
	%eof           reduce using rule 22

	ListInstDec    goto state 58
	InstDec        goto state 51

State 52

	%start_pListClassDec -> ListClassDec .              (rule 1)

	%eof           accept


State 53

	ListClassDec -> ClassDec .                          (rule 20)
	ListClassDec -> ClassDec . ';' ListClassDec         (rule 21)

	';'            shift, and enter state 57
	'[]'           reduce using rule 20
	'\\'           reduce using rule 20
	'case'         reduce using rule 20
	'instance'     reduce using rule 20
	L_LIdent       reduce using rule 20
	L_True         reduce using rule 20
	L_False        reduce using rule 20
	%eof           reduce using rule 20


State 54

	%start_pProg -> Prog .                              (rule 0)

	%eof           accept


State 55

	Prog -> ListClassDec . ListInstDec ListExpr         (rule 18)

	'[]'           reduce using rule 22
	'\\'           reduce using rule 22
	'case'         reduce using rule 22
	'instance'     shift, and enter state 43
	L_LIdent       reduce using rule 22
	L_True         reduce using rule 22
	L_False        reduce using rule 22
	%eof           reduce using rule 22

	ListInstDec    goto state 56
	InstDec        goto state 51

State 56

	Prog -> ListClassDec ListInstDec . ListExpr         (rule 18)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35
	%eof           reduce using rule 24

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	ListExpr       goto state 88
	Expr           goto state 49
	List           goto state 31

State 57

	ListClassDec -> ClassDec ';' . ListClassDec         (rule 21)

	'[]'           reduce using rule 19
	'\\'           reduce using rule 19
	'case'         reduce using rule 19
	'class'        shift, and enter state 45
	'instance'     reduce using rule 19
	L_LIdent       reduce using rule 19
	L_True         reduce using rule 19
	L_False        reduce using rule 19
	%eof           reduce using rule 19

	ListClassDec   goto state 87
	ClassDec       goto state 53

State 58

	ListInstDec -> InstDec ListInstDec .                (rule 23)

	'[]'           reduce using rule 23
	'\\'           reduce using rule 23
	'case'         reduce using rule 23
	L_LIdent       reduce using rule 23
	L_True         reduce using rule 23
	L_False        reduce using rule 23
	%eof           reduce using rule 23


State 59

	ListExpr -> Expr ListExpr .                         (rule 25)

	%eof           reduce using rule 25


State 60

	ListExpr -> Expr . ListExpr                         (rule 25)
	Expr -> Expr . Expr                                 (rule 37)
	Expr -> Expr Expr .                                 (rule 37)

	'[]'           shift, and enter state 26
			(reduce using rule 37)

	'\\'           shift, and enter state 32
			(reduce using rule 37)

	'case'         shift, and enter state 33
			(reduce using rule 37)

	L_LIdent       shift, and enter state 21
			(reduce using rule 37)

	L_True         shift, and enter state 34
			(reduce using rule 37)

	L_False        shift, and enter state 35
			(reduce using rule 37)

	%eof           reduce using rule 37
			(reduce using rule 24)


	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	ListExpr       goto state 59
	Expr           goto state 60
	List           goto state 31

State 61

	ClassDec -> 'class' UIdent . LIdent 'where' ListClassOpDec    (rule 28)

	L_LIdent       shift, and enter state 21

	LIdent         goto state 86

State 62

	InstDec -> 'instance' UIdent . 'where' ListClassOpImp    (rule 29)

	'where'        shift, and enter state 85


State 63

	ListClassOpDec -> ClassOpDec ListClassOpDec .       (rule 31)

	';'            reduce using rule 31
	'[]'           reduce using rule 31
	'\\'           reduce using rule 31
	'case'         reduce using rule 31
	'instance'     reduce using rule 31
	L_LIdent       reduce using rule 31
	L_True         reduce using rule 31
	L_False        reduce using rule 31
	%eof           reduce using rule 31


State 64

	ClassOpDec -> LIdent ':' . SType                    (rule 26)

	'Bool'         shift, and enter state 19
	'['            shift, and enter state 20
	L_UIdent       shift, and enter state 15
	L_LIdent       shift, and enter state 21

	UIdent         goto state 16
	LIdent         goto state 17
	SType          goto state 84

State 65

	ListClassOpImp -> ClassOpImp ListClassOpImp .       (rule 33)

	'[]'           reduce using rule 33
	'\\'           reduce using rule 33
	'case'         reduce using rule 33
	'instance'     reduce using rule 33
	L_LIdent       reduce using rule 33
	L_True         reduce using rule 33
	L_False        reduce using rule 33
	%eof           reduce using rule 33


State 66

	ClassOpImp -> LIdent '=' . Expr                     (rule 27)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 83
	List           goto state 31

State 67

	Expr -> Expr . Expr                                 (rule 37)
	Expr -> 'case' Expr . 'of' List '->' Expr ';' List '->' Expr    (rule 39)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	'of'           shift, and enter state 82
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 69
	List           goto state 31

State 68

	Expr -> '\\' LIdent . '->' Expr                     (rule 35)

	'->'           shift, and enter state 81


State 69

	Expr -> Expr . Expr                                 (rule 37)
	Expr -> Expr Expr .                                 (rule 37)

	';'            reduce using rule 37
	'[]'           shift, and enter state 26
			(reduce using rule 37)

	'\\'           shift, and enter state 32
			(reduce using rule 37)

	'case'         shift, and enter state 33
			(reduce using rule 37)

	'instance'     reduce using rule 37
	'of'           reduce using rule 37
	L_LIdent       shift, and enter state 21
			(reduce using rule 37)

	L_True         shift, and enter state 34
			(reduce using rule 37)

	L_False        shift, and enter state 35
			(reduce using rule 37)

	%eof           reduce using rule 37

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 69
	List           goto state 31

State 70

	List -> LIdent ':' . List                           (rule 43)

	'[]'           shift, and enter state 26
	L_LIdent       shift, and enter state 21

	LIdent         goto state 24
	List           goto state 80

State 71

	Expr -> LIdent '=' . Expr                           (rule 34)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 79
	List           goto state 31

State 72

	OvType -> '<' UIdent . LIdent ',' '>' '=>' SType    (rule 44)

	L_LIdent       shift, and enter state 21

	LIdent         goto state 78

State 73

	SType -> SType . '->' SType                         (rule 48)
	SType -> '[' SType . ']'                            (rule 49)

	'->'           shift, and enter state 74
	']'            shift, and enter state 77


State 74

	SType -> SType '->' . SType                         (rule 48)

	'Bool'         shift, and enter state 19
	'['            shift, and enter state 20
	L_UIdent       shift, and enter state 15
	L_LIdent       shift, and enter state 21

	UIdent         goto state 16
	LIdent         goto state 17
	SType          goto state 76

State 75

	SType -> UIdent LIdent .                            (rule 46)

	'->'           reduce using rule 46
	';'            reduce using rule 46
	'[]'           reduce using rule 46
	'\\'           reduce using rule 46
	']'            reduce using rule 46
	'case'         reduce using rule 46
	'instance'     reduce using rule 46
	L_LIdent       reduce using rule 46
	L_True         reduce using rule 46
	L_False        reduce using rule 46
	%eof           reduce using rule 46


State 76

	SType -> SType . '->' SType                         (rule 48)
	SType -> SType '->' SType .                         (rule 48)

	'->'           shift, and enter state 74
			(reduce using rule 48)

	';'            reduce using rule 48
	'[]'           reduce using rule 48
	'\\'           reduce using rule 48
	']'            reduce using rule 48
	'case'         reduce using rule 48
	'instance'     reduce using rule 48
	L_LIdent       reduce using rule 48
	L_True         reduce using rule 48
	L_False        reduce using rule 48
	%eof           reduce using rule 48


State 77

	SType -> '[' SType ']' .                            (rule 49)

	'->'           reduce using rule 49
	';'            reduce using rule 49
	'[]'           reduce using rule 49
	'\\'           reduce using rule 49
	']'            reduce using rule 49
	'case'         reduce using rule 49
	'instance'     reduce using rule 49
	L_LIdent       reduce using rule 49
	L_True         reduce using rule 49
	L_False        reduce using rule 49
	%eof           reduce using rule 49


State 78

	OvType -> '<' UIdent LIdent . ',' '>' '=>' SType    (rule 44)

	','            shift, and enter state 93


State 79

	Expr -> LIdent '=' Expr .                           (rule 34)
	Expr -> Expr . Expr                                 (rule 37)

	';'            reduce using rule 34
	'[]'           shift, and enter state 26
			(reduce using rule 34)

	'\\'           shift, and enter state 32
			(reduce using rule 34)

	'case'         shift, and enter state 33
			(reduce using rule 34)

	'instance'     reduce using rule 34
	'of'           reduce using rule 34
	L_LIdent       shift, and enter state 21
			(reduce using rule 34)

	L_True         shift, and enter state 34
			(reduce using rule 34)

	L_False        shift, and enter state 35
			(reduce using rule 34)

	%eof           reduce using rule 34

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 69
	List           goto state 31

State 80

	List -> LIdent ':' List .                           (rule 43)

	'->'           reduce using rule 43
	';'            reduce using rule 43
	'[]'           reduce using rule 43
	'\\'           reduce using rule 43
	'case'         reduce using rule 43
	'instance'     reduce using rule 43
	'of'           reduce using rule 43
	L_LIdent       reduce using rule 43
	L_True         reduce using rule 43
	L_False        reduce using rule 43
	%eof           reduce using rule 43


State 81

	Expr -> '\\' LIdent '->' . Expr                     (rule 35)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 92
	List           goto state 31

State 82

	Expr -> 'case' Expr 'of' . List '->' Expr ';' List '->' Expr    (rule 39)

	'[]'           shift, and enter state 26
	L_LIdent       shift, and enter state 21

	LIdent         goto state 24
	List           goto state 91

State 83

	ClassOpImp -> LIdent '=' Expr .                     (rule 27)
	Expr -> Expr . Expr                                 (rule 37)

	'[]'           shift, and enter state 26
			(reduce using rule 27)

	'\\'           shift, and enter state 32
			(reduce using rule 27)

	'case'         shift, and enter state 33
			(reduce using rule 27)

	'instance'     reduce using rule 27
	L_LIdent       shift, and enter state 21
			(reduce using rule 27)

	L_True         shift, and enter state 34
			(reduce using rule 27)

	L_False        shift, and enter state 35
			(reduce using rule 27)

	%eof           reduce using rule 27

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 69
	List           goto state 31

State 84

	ClassOpDec -> LIdent ':' SType .                    (rule 26)
	SType -> SType . '->' SType                         (rule 48)

	'->'           shift, and enter state 74
	';'            reduce using rule 26
	'[]'           reduce using rule 26
	'\\'           reduce using rule 26
	'case'         reduce using rule 26
	'instance'     reduce using rule 26
	L_LIdent       reduce using rule 26
	L_True         reduce using rule 26
	L_False        reduce using rule 26
	%eof           reduce using rule 26


State 85

	InstDec -> 'instance' UIdent 'where' . ListClassOpImp    (rule 29)

	'[]'           reduce using rule 32
	'\\'           reduce using rule 32
	'case'         reduce using rule 32
	'instance'     reduce using rule 32
	L_LIdent       shift, and enter state 21
			(reduce using rule 32)

	L_True         reduce using rule 32
	L_False        reduce using rule 32
	%eof           reduce using rule 32

	LIdent         goto state 36
	ClassOpImp     goto state 37
	ListClassOpImp goto state 90

State 86

	ClassDec -> 'class' UIdent LIdent . 'where' ListClassOpDec    (rule 28)

	'where'        shift, and enter state 89


State 87

	ListClassDec -> ClassDec ';' ListClassDec .         (rule 21)

	'[]'           reduce using rule 21
	'\\'           reduce using rule 21
	'case'         reduce using rule 21
	'instance'     reduce using rule 21
	L_LIdent       reduce using rule 21
	L_True         reduce using rule 21
	L_False        reduce using rule 21
	%eof           reduce using rule 21


State 88

	Prog -> ListClassDec ListInstDec ListExpr .         (rule 18)

	%eof           reduce using rule 18


State 89

	ClassDec -> 'class' UIdent LIdent 'where' . ListClassOpDec    (rule 28)

	';'            reduce using rule 30
	'[]'           reduce using rule 30
	'\\'           reduce using rule 30
	'case'         reduce using rule 30
	'instance'     reduce using rule 30
	L_LIdent       shift, and enter state 21
			(reduce using rule 30)

	L_True         reduce using rule 30
	L_False        reduce using rule 30
	%eof           reduce using rule 30

	LIdent         goto state 39
	ClassOpDec     goto state 40
	ListClassOpDec goto state 96

State 90

	InstDec -> 'instance' UIdent 'where' ListClassOpImp .    (rule 29)

	'[]'           reduce using rule 29
	'\\'           reduce using rule 29
	'case'         reduce using rule 29
	'instance'     reduce using rule 29
	L_LIdent       reduce using rule 29
	L_True         reduce using rule 29
	L_False        reduce using rule 29
	%eof           reduce using rule 29


State 91

	Expr -> 'case' Expr 'of' List . '->' Expr ';' List '->' Expr    (rule 39)

	'->'           shift, and enter state 95


State 92

	Expr -> '\\' LIdent '->' Expr .                     (rule 35)
	Expr -> Expr . Expr                                 (rule 37)

	';'            reduce using rule 35
	'[]'           shift, and enter state 26
			(reduce using rule 35)

	'\\'           shift, and enter state 32
			(reduce using rule 35)

	'case'         shift, and enter state 33
			(reduce using rule 35)

	'instance'     reduce using rule 35
	'of'           reduce using rule 35
	L_LIdent       shift, and enter state 21
			(reduce using rule 35)

	L_True         shift, and enter state 34
			(reduce using rule 35)

	L_False        shift, and enter state 35
			(reduce using rule 35)

	%eof           reduce using rule 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 69
	List           goto state 31

State 93

	OvType -> '<' UIdent LIdent ',' . '>' '=>' SType    (rule 44)

	'>'            shift, and enter state 94


State 94

	OvType -> '<' UIdent LIdent ',' '>' . '=>' SType    (rule 44)

	'=>'           shift, and enter state 98


State 95

	Expr -> 'case' Expr 'of' List '->' . Expr ';' List '->' Expr    (rule 39)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 97
	List           goto state 31

State 96

	ClassDec -> 'class' UIdent LIdent 'where' ListClassOpDec .    (rule 28)

	';'            reduce using rule 28
	'[]'           reduce using rule 28
	'\\'           reduce using rule 28
	'case'         reduce using rule 28
	'instance'     reduce using rule 28
	L_LIdent       reduce using rule 28
	L_True         reduce using rule 28
	L_False        reduce using rule 28
	%eof           reduce using rule 28


State 97

	Expr -> Expr . Expr                                 (rule 37)
	Expr -> 'case' Expr 'of' List '->' Expr . ';' List '->' Expr    (rule 39)

	';'            shift, and enter state 100
	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 69
	List           goto state 31

State 98

	OvType -> '<' UIdent LIdent ',' '>' '=>' . SType    (rule 44)

	'Bool'         shift, and enter state 19
	'['            shift, and enter state 20
	L_UIdent       shift, and enter state 15
	L_LIdent       shift, and enter state 21

	UIdent         goto state 16
	LIdent         goto state 17
	SType          goto state 99

State 99

	OvType -> '<' UIdent LIdent ',' '>' '=>' SType .    (rule 44)
	SType -> SType . '->' SType                         (rule 48)

	'->'           shift, and enter state 74
	%eof           reduce using rule 44


State 100

	Expr -> 'case' Expr 'of' List '->' Expr ';' . List '->' Expr    (rule 39)

	'[]'           shift, and enter state 26
	L_LIdent       shift, and enter state 21

	LIdent         goto state 24
	List           goto state 101

State 101

	Expr -> 'case' Expr 'of' List '->' Expr ';' List . '->' Expr    (rule 39)

	'->'           shift, and enter state 102


State 102

	Expr -> 'case' Expr 'of' List '->' Expr ';' List '->' . Expr    (rule 39)

	'[]'           shift, and enter state 26
	'\\'           shift, and enter state 32
	'case'         shift, and enter state 33
	L_LIdent       shift, and enter state 21
	L_True         shift, and enter state 34
	L_False        shift, and enter state 35

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 103
	List           goto state 31

State 103

	Expr -> Expr . Expr                                 (rule 37)
	Expr -> 'case' Expr 'of' List '->' Expr ';' List '->' Expr .    (rule 39)

	';'            reduce using rule 39
	'[]'           shift, and enter state 26
			(reduce using rule 39)

	'\\'           shift, and enter state 32
			(reduce using rule 39)

	'case'         shift, and enter state 33
			(reduce using rule 39)

	'instance'     reduce using rule 39
	'of'           reduce using rule 39
	L_LIdent       shift, and enter state 21
			(reduce using rule 39)

	L_True         shift, and enter state 34
			(reduce using rule 39)

	L_False        shift, and enter state 35
			(reduce using rule 39)

	%eof           reduce using rule 39

	LIdent         goto state 27
	True           goto state 28
	False          goto state 29
	Expr           goto state 69
	List           goto state 31

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 50
Number of terminals: 22
Number of non-terminals: 32
Number of states: 104

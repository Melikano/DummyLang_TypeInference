-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Dummy/Par.y
-----------------------------------------------------------------------------

state 47 contains 1 shift/reduce conflicts.
state 50 contains 1 shift/reduce conflicts.
state 70 contains 6 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 79 contains 6 shift/reduce conflicts.
state 90 contains 1 shift/reduce conflicts.
state 92 contains 6 shift/reduce conflicts.
state 96 contains 6 shift/reduce conflicts.
state 98 contains 1 shift/reduce conflicts.
state 102 contains 1 shift/reduce conflicts.
state 105 contains 6 shift/reduce conflicts.
state 114 contains 6 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProg -> Prog                               (0)
	%start_pListClassDec -> ListClassDec               (1)
	%start_pListInstDec -> ListInstDec                 (2)
	%start_pListExpr -> ListExpr                       (3)
	%start_pClassOpDec -> ClassOpDec                   (4)
	%start_pClassOpImp -> ClassOpImp                   (5)
	%start_pClassDec -> ClassDec                       (6)
	%start_pInstDec -> InstDec                         (7)
	%start_pListClassOpDec -> ListClassOpDec           (8)
	%start_pListClassOpImp -> ListClassOpImp           (9)
	%start_pExpr -> Expr                               (10)
	%start_pList -> List                               (11)
	%start_pTyC -> TyC                                 (12)
	%start_pOvType -> OvType                           (13)
	%start_pListTyC -> ListTyC                         (14)
	%start_pSType -> SType                             (15)
	%start_pDType -> DType                             (16)
	UIdent -> L_UIdent                                 (17)
	LIdent -> L_LIdent                                 (18)
	True -> L_True                                     (19)
	False -> L_False                                   (20)
	Prog -> ListClassDec ListInstDec ListExpr          (21)
	ListClassDec ->                                    (22)
	ListClassDec -> ClassDec                           (23)
	ListClassDec -> ClassDec ';' ListClassDec          (24)
	ListInstDec ->                                     (25)
	ListInstDec -> InstDec ListInstDec                 (26)
	ListExpr ->                                        (27)
	ListExpr -> Expr ListExpr                          (28)
	ClassOpDec -> LIdent ':' SType                     (29)
	ClassOpImp -> LIdent '=' Expr                      (30)
	ClassDec -> 'class' UIdent LIdent 'where' ListClassOpDec   (31)
	InstDec -> 'instance' UIdent 'where' ListClassOpImp   (32)
	ListClassOpDec ->                                  (33)
	ListClassOpDec -> ClassOpDec ListClassOpDec        (34)
	ListClassOpImp ->                                  (35)
	ListClassOpImp -> ClassOpImp ListClassOpImp        (36)
	Expr -> LIdent '=' Expr                            (37)
	Expr -> '\\' LIdent '->' Expr                      (38)
	Expr -> LIdent                                     (39)
	Expr -> Expr Expr                                  (40)
	Expr -> List                                       (41)
	Expr -> 'case' Expr 'of' List '->' Expr ';' List '->' Expr   (42)
	Expr -> True                                       (43)
	Expr -> False                                      (44)
	List -> '[]'                                       (45)
	List -> LIdent ':' List                            (46)
	TyC -> UIdent SType                                (47)
	OvType -> '<' ListTyC '>' '=>' SType               (48)
	ListTyC ->                                         (49)
	ListTyC -> TyC                                     (50)
	ListTyC -> TyC ',' ListTyC                         (51)
	SType -> LIdent                                    (52)
	SType -> UIdent LIdent                             (53)
	SType -> 'Bool'                                    (54)
	SType -> SType '->' SType                          (55)
	SType -> '[' SType ']'                             (56)
	DType -> OvType                                    (57)
	DType -> SType                                     (58)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	','            { PT _ (TS _ 1) }
	'->'           { PT _ (TS _ 2) }
	':'            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'<'            { PT _ (TS _ 5) }
	'='            { PT _ (TS _ 6) }
	'=>'           { PT _ (TS _ 7) }
	'>'            { PT _ (TS _ 8) }
	'Bool'         { PT _ (TS _ 9) }
	'['            { PT _ (TS _ 10) }
	'[]'           { PT _ (TS _ 11) }
	'\\'           { PT _ (TS _ 12) }
	']'            { PT _ (TS _ 13) }
	'case'         { PT _ (TS _ 14) }
	'class'        { PT _ (TS _ 15) }
	'instance'     { PT _ (TS _ 16) }
	'of'           { PT _ (TS _ 17) }
	'where'        { PT _ (TS _ 18) }
	L_UIdent       { PT _ (T_UIdent $$) }
	L_LIdent       { PT _ (T_LIdent $$) }
	L_True         { PT _ (T_True $$) }
	L_False        { PT _ (T_False $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProg    rule  0
	%start_pListClassDec rule  1
	%start_pListInstDec rule  2
	%start_pListExpr rule  3
	%start_pClassOpDec rule  4
	%start_pClassOpImp rule  5
	%start_pClassDec rule  6
	%start_pInstDec rule  7
	%start_pListClassOpDec rule  8
	%start_pListClassOpImp rule  9
	%start_pExpr    rule  10
	%start_pList    rule  11
	%start_pTyC     rule  12
	%start_pOvType  rule  13
	%start_pListTyC rule  14
	%start_pSType   rule  15
	%start_pDType   rule  16
	UIdent          rule  17
	LIdent          rule  18
	True            rule  19
	False           rule  20
	Prog            rule  21
	ListClassDec    rules 22, 23, 24
	ListInstDec     rules 25, 26
	ListExpr        rules 27, 28
	ClassOpDec      rule  29
	ClassOpImp      rule  30
	ClassDec        rule  31
	InstDec         rule  32
	ListClassOpDec  rules 33, 34
	ListClassOpImp  rules 35, 36
	Expr            rules 37, 38, 39, 40, 41, 42, 43, 44
	List            rules 45, 46
	TyC             rule  47
	OvType          rule  48
	ListTyC         rules 49, 50, 51
	SType           rules 52, 53, 54, 55, 56
	DType           rules 57, 58

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProg -> . Prog                              (rule 0)

	'[]'           reduce using rule 22
	'\\'           reduce using rule 22
	'case'         reduce using rule 22
	'class'        shift, and enter state 55
	'instance'     reduce using rule 22
	L_LIdent       reduce using rule 22
	L_True         reduce using rule 22
	L_False        reduce using rule 22
	%eof           reduce using rule 22

	Prog           goto state 64
	ListClassDec   goto state 65
	ClassDec       goto state 63

State 1

	%start_pListClassDec -> . ListClassDec              (rule 1)

	'class'        shift, and enter state 55
	%eof           reduce using rule 22

	ListClassDec   goto state 62
	ClassDec       goto state 63

State 2

	%start_pListInstDec -> . ListInstDec                (rule 2)

	'instance'     shift, and enter state 53
	%eof           reduce using rule 25

	ListInstDec    goto state 60
	InstDec        goto state 61

State 3

	%start_pListExpr -> . ListExpr                      (rule 3)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45
	%eof           reduce using rule 27

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	ListExpr       goto state 58
	Expr           goto state 59
	List           goto state 41

State 4

	%start_pClassOpDec -> . ClassOpDec                  (rule 4)

	L_LIdent       shift, and enter state 27

	LIdent         goto state 49
	ClassOpDec     goto state 57

State 5

	%start_pClassOpImp -> . ClassOpImp                  (rule 5)

	L_LIdent       shift, and enter state 27

	LIdent         goto state 46
	ClassOpImp     goto state 56

State 6

	%start_pClassDec -> . ClassDec                      (rule 6)

	'class'        shift, and enter state 55

	ClassDec       goto state 54

State 7

	%start_pInstDec -> . InstDec                        (rule 7)

	'instance'     shift, and enter state 53

	InstDec        goto state 52

State 8

	%start_pListClassOpDec -> . ListClassOpDec          (rule 8)

	L_LIdent       shift, and enter state 27
	%eof           reduce using rule 33

	LIdent         goto state 49
	ClassOpDec     goto state 50
	ListClassOpDec goto state 51

State 9

	%start_pListClassOpImp -> . ListClassOpImp          (rule 9)

	L_LIdent       shift, and enter state 27
	%eof           reduce using rule 35

	LIdent         goto state 46
	ClassOpImp     goto state 47
	ListClassOpImp goto state 48

State 10

	%start_pExpr -> . Expr                              (rule 10)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 40
	List           goto state 41

State 11

	%start_pList -> . List                              (rule 11)

	'[]'           shift, and enter state 36
	L_LIdent       shift, and enter state 27

	LIdent         goto state 34
	List           goto state 35

State 12

	%start_pTyC -> . TyC                                (rule 12)

	L_UIdent       shift, and enter state 18

	UIdent         goto state 29
	TyC            goto state 33

State 13

	%start_pOvType -> . OvType                          (rule 13)

	'<'            shift, and enter state 24

	OvType         goto state 32

State 14

	%start_pListTyC -> . ListTyC                        (rule 14)

	L_UIdent       shift, and enter state 18
	%eof           reduce using rule 49

	UIdent         goto state 29
	TyC            goto state 30
	ListTyC        goto state 31

State 15

	%start_pSType -> . SType                            (rule 15)

	'Bool'         shift, and enter state 25
	'['            shift, and enter state 26
	L_UIdent       shift, and enter state 18
	L_LIdent       shift, and enter state 27

	UIdent         goto state 19
	LIdent         goto state 20
	SType          goto state 28

State 16

	%start_pDType -> . DType                            (rule 16)

	'<'            shift, and enter state 24
	'Bool'         shift, and enter state 25
	'['            shift, and enter state 26
	L_UIdent       shift, and enter state 18
	L_LIdent       shift, and enter state 27

	UIdent         goto state 19
	LIdent         goto state 20
	OvType         goto state 21
	SType          goto state 22
	DType          goto state 23

State 17

	UIdent -> . L_UIdent                                (rule 17)

	L_UIdent       shift, and enter state 18


State 18

	UIdent -> L_UIdent .                                (rule 17)

	'Bool'         reduce using rule 17
	'['            reduce using rule 17
	'where'        reduce using rule 17
	L_UIdent       reduce using rule 17
	L_LIdent       reduce using rule 17


State 19

	SType -> UIdent . LIdent                            (rule 53)

	L_LIdent       shift, and enter state 27

	LIdent         goto state 87

State 20

	SType -> LIdent .                                   (rule 52)

	','            reduce using rule 52
	'->'           reduce using rule 52
	';'            reduce using rule 52
	'>'            reduce using rule 52
	'[]'           reduce using rule 52
	'\\'           reduce using rule 52
	']'            reduce using rule 52
	'case'         reduce using rule 52
	'instance'     reduce using rule 52
	L_LIdent       reduce using rule 52
	L_True         reduce using rule 52
	L_False        reduce using rule 52
	%eof           reduce using rule 52


State 21

	DType -> OvType .                                   (rule 57)

	%eof           reduce using rule 57


State 22

	SType -> SType . '->' SType                         (rule 55)
	DType -> SType .                                    (rule 58)

	'->'           shift, and enter state 84
	%eof           reduce using rule 58


State 23

	%start_pDType -> DType .                            (rule 16)

	%eof           accept


State 24

	OvType -> '<' . ListTyC '>' '=>' SType              (rule 48)

	'>'            reduce using rule 49
	L_UIdent       shift, and enter state 18

	UIdent         goto state 29
	TyC            goto state 30
	ListTyC        goto state 86

State 25

	SType -> 'Bool' .                                   (rule 54)

	','            reduce using rule 54
	'->'           reduce using rule 54
	';'            reduce using rule 54
	'>'            reduce using rule 54
	'[]'           reduce using rule 54
	'\\'           reduce using rule 54
	']'            reduce using rule 54
	'case'         reduce using rule 54
	'instance'     reduce using rule 54
	L_LIdent       reduce using rule 54
	L_True         reduce using rule 54
	L_False        reduce using rule 54
	%eof           reduce using rule 54


State 26

	SType -> '[' . SType ']'                            (rule 56)

	'Bool'         shift, and enter state 25
	'['            shift, and enter state 26
	L_UIdent       shift, and enter state 18
	L_LIdent       shift, and enter state 27

	UIdent         goto state 19
	LIdent         goto state 20
	SType          goto state 85

State 27

	LIdent -> L_LIdent .                                (rule 18)

	','            reduce using rule 18
	'->'           reduce using rule 18
	':'            reduce using rule 18
	';'            reduce using rule 18
	'='            reduce using rule 18
	'>'            reduce using rule 18
	'[]'           reduce using rule 18
	'\\'           reduce using rule 18
	']'            reduce using rule 18
	'case'         reduce using rule 18
	'instance'     reduce using rule 18
	'of'           reduce using rule 18
	'where'        reduce using rule 18
	L_LIdent       reduce using rule 18
	L_True         reduce using rule 18
	L_False        reduce using rule 18
	%eof           reduce using rule 18


State 28

	%start_pSType -> SType .                            (rule 15)
	SType -> SType . '->' SType                         (rule 55)

	'->'           shift, and enter state 84
	%eof           accept


State 29

	TyC -> UIdent . SType                               (rule 47)

	'Bool'         shift, and enter state 25
	'['            shift, and enter state 26
	L_UIdent       shift, and enter state 18
	L_LIdent       shift, and enter state 27

	UIdent         goto state 19
	LIdent         goto state 20
	SType          goto state 83

State 30

	ListTyC -> TyC .                                    (rule 50)
	ListTyC -> TyC . ',' ListTyC                        (rule 51)

	','            shift, and enter state 82
	'>'            reduce using rule 50
	%eof           reduce using rule 50


State 31

	%start_pListTyC -> ListTyC .                        (rule 14)

	%eof           accept


State 32

	%start_pOvType -> OvType .                          (rule 13)

	%eof           accept


State 33

	%start_pTyC -> TyC .                                (rule 12)

	%eof           accept


State 34

	List -> LIdent . ':' List                           (rule 46)

	':'            shift, and enter state 80


State 35

	%start_pList -> List .                              (rule 11)

	%eof           accept


State 36

	List -> '[]' .                                      (rule 45)

	'->'           reduce using rule 45
	';'            reduce using rule 45
	'[]'           reduce using rule 45
	'\\'           reduce using rule 45
	'case'         reduce using rule 45
	'instance'     reduce using rule 45
	'of'           reduce using rule 45
	L_LIdent       reduce using rule 45
	L_True         reduce using rule 45
	L_False        reduce using rule 45
	%eof           reduce using rule 45


State 37

	Expr -> LIdent . '=' Expr                           (rule 37)
	Expr -> LIdent .                                    (rule 39)
	List -> LIdent . ':' List                           (rule 46)

	':'            shift, and enter state 80
	';'            reduce using rule 39
	'='            shift, and enter state 81
	'[]'           reduce using rule 39
	'\\'           reduce using rule 39
	'case'         reduce using rule 39
	'instance'     reduce using rule 39
	'of'           reduce using rule 39
	L_LIdent       reduce using rule 39
	L_True         reduce using rule 39
	L_False        reduce using rule 39
	%eof           reduce using rule 39


State 38

	Expr -> True .                                      (rule 43)

	';'            reduce using rule 43
	'[]'           reduce using rule 43
	'\\'           reduce using rule 43
	'case'         reduce using rule 43
	'instance'     reduce using rule 43
	'of'           reduce using rule 43
	L_LIdent       reduce using rule 43
	L_True         reduce using rule 43
	L_False        reduce using rule 43
	%eof           reduce using rule 43


State 39

	Expr -> False .                                     (rule 44)

	';'            reduce using rule 44
	'[]'           reduce using rule 44
	'\\'           reduce using rule 44
	'case'         reduce using rule 44
	'instance'     reduce using rule 44
	'of'           reduce using rule 44
	L_LIdent       reduce using rule 44
	L_True         reduce using rule 44
	L_False        reduce using rule 44
	%eof           reduce using rule 44


State 40

	%start_pExpr -> Expr .                              (rule 10)
	Expr -> Expr . Expr                                 (rule 40)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45
	%eof           accept

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 79
	List           goto state 41

State 41

	Expr -> List .                                      (rule 41)

	';'            reduce using rule 41
	'[]'           reduce using rule 41
	'\\'           reduce using rule 41
	'case'         reduce using rule 41
	'instance'     reduce using rule 41
	'of'           reduce using rule 41
	L_LIdent       reduce using rule 41
	L_True         reduce using rule 41
	L_False        reduce using rule 41
	%eof           reduce using rule 41


State 42

	Expr -> '\\' . LIdent '->' Expr                     (rule 38)

	L_LIdent       shift, and enter state 27

	LIdent         goto state 78

State 43

	Expr -> 'case' . Expr 'of' List '->' Expr ';' List '->' Expr    (rule 42)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 77
	List           goto state 41

State 44

	True -> L_True .                                    (rule 19)

	';'            reduce using rule 19
	'[]'           reduce using rule 19
	'\\'           reduce using rule 19
	'case'         reduce using rule 19
	'instance'     reduce using rule 19
	'of'           reduce using rule 19
	L_LIdent       reduce using rule 19
	L_True         reduce using rule 19
	L_False        reduce using rule 19
	%eof           reduce using rule 19


State 45

	False -> L_False .                                  (rule 20)

	';'            reduce using rule 20
	'[]'           reduce using rule 20
	'\\'           reduce using rule 20
	'case'         reduce using rule 20
	'instance'     reduce using rule 20
	'of'           reduce using rule 20
	L_LIdent       reduce using rule 20
	L_True         reduce using rule 20
	L_False        reduce using rule 20
	%eof           reduce using rule 20


State 46

	ClassOpImp -> LIdent . '=' Expr                     (rule 30)

	'='            shift, and enter state 76


State 47

	ListClassOpImp -> ClassOpImp . ListClassOpImp       (rule 36)

	'[]'           reduce using rule 35
	'\\'           reduce using rule 35
	'case'         reduce using rule 35
	'instance'     reduce using rule 35
	L_LIdent       shift, and enter state 27
			(reduce using rule 35)

	L_True         reduce using rule 35
	L_False        reduce using rule 35
	%eof           reduce using rule 35

	LIdent         goto state 46
	ClassOpImp     goto state 47
	ListClassOpImp goto state 75

State 48

	%start_pListClassOpImp -> ListClassOpImp .          (rule 9)

	%eof           accept


State 49

	ClassOpDec -> LIdent . ':' SType                    (rule 29)

	':'            shift, and enter state 74


State 50

	ListClassOpDec -> ClassOpDec . ListClassOpDec       (rule 34)

	';'            reduce using rule 33
	'[]'           reduce using rule 33
	'\\'           reduce using rule 33
	'case'         reduce using rule 33
	'instance'     reduce using rule 33
	L_LIdent       shift, and enter state 27
			(reduce using rule 33)

	L_True         reduce using rule 33
	L_False        reduce using rule 33
	%eof           reduce using rule 33

	LIdent         goto state 49
	ClassOpDec     goto state 50
	ListClassOpDec goto state 73

State 51

	%start_pListClassOpDec -> ListClassOpDec .          (rule 8)

	%eof           accept


State 52

	%start_pInstDec -> InstDec .                        (rule 7)

	%eof           accept


State 53

	InstDec -> 'instance' . UIdent 'where' ListClassOpImp    (rule 32)

	L_UIdent       shift, and enter state 18

	UIdent         goto state 72

State 54

	%start_pClassDec -> ClassDec .                      (rule 6)

	%eof           accept


State 55

	ClassDec -> 'class' . UIdent LIdent 'where' ListClassOpDec    (rule 31)

	L_UIdent       shift, and enter state 18

	UIdent         goto state 71

State 56

	%start_pClassOpImp -> ClassOpImp .                  (rule 5)

	%eof           accept


State 57

	%start_pClassOpDec -> ClassOpDec .                  (rule 4)

	%eof           accept


State 58

	%start_pListExpr -> ListExpr .                      (rule 3)

	%eof           accept


State 59

	ListExpr -> Expr . ListExpr                         (rule 28)
	Expr -> Expr . Expr                                 (rule 40)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45
	%eof           reduce using rule 27

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	ListExpr       goto state 69
	Expr           goto state 70
	List           goto state 41

State 60

	%start_pListInstDec -> ListInstDec .                (rule 2)

	%eof           accept


State 61

	ListInstDec -> InstDec . ListInstDec                (rule 26)

	'[]'           reduce using rule 25
	'\\'           reduce using rule 25
	'case'         reduce using rule 25
	'instance'     shift, and enter state 53
	L_LIdent       reduce using rule 25
	L_True         reduce using rule 25
	L_False        reduce using rule 25
	%eof           reduce using rule 25

	ListInstDec    goto state 68
	InstDec        goto state 61

State 62

	%start_pListClassDec -> ListClassDec .              (rule 1)

	%eof           accept


State 63

	ListClassDec -> ClassDec .                          (rule 23)
	ListClassDec -> ClassDec . ';' ListClassDec         (rule 24)

	';'            shift, and enter state 67
	'[]'           reduce using rule 23
	'\\'           reduce using rule 23
	'case'         reduce using rule 23
	'instance'     reduce using rule 23
	L_LIdent       reduce using rule 23
	L_True         reduce using rule 23
	L_False        reduce using rule 23
	%eof           reduce using rule 23


State 64

	%start_pProg -> Prog .                              (rule 0)

	%eof           accept


State 65

	Prog -> ListClassDec . ListInstDec ListExpr         (rule 21)

	'[]'           reduce using rule 25
	'\\'           reduce using rule 25
	'case'         reduce using rule 25
	'instance'     shift, and enter state 53
	L_LIdent       reduce using rule 25
	L_True         reduce using rule 25
	L_False        reduce using rule 25
	%eof           reduce using rule 25

	ListInstDec    goto state 66
	InstDec        goto state 61

State 66

	Prog -> ListClassDec ListInstDec . ListExpr         (rule 21)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45
	%eof           reduce using rule 27

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	ListExpr       goto state 101
	Expr           goto state 59
	List           goto state 41

State 67

	ListClassDec -> ClassDec ';' . ListClassDec         (rule 24)

	'[]'           reduce using rule 22
	'\\'           reduce using rule 22
	'case'         reduce using rule 22
	'class'        shift, and enter state 55
	'instance'     reduce using rule 22
	L_LIdent       reduce using rule 22
	L_True         reduce using rule 22
	L_False        reduce using rule 22
	%eof           reduce using rule 22

	ListClassDec   goto state 100
	ClassDec       goto state 63

State 68

	ListInstDec -> InstDec ListInstDec .                (rule 26)

	'[]'           reduce using rule 26
	'\\'           reduce using rule 26
	'case'         reduce using rule 26
	L_LIdent       reduce using rule 26
	L_True         reduce using rule 26
	L_False        reduce using rule 26
	%eof           reduce using rule 26


State 69

	ListExpr -> Expr ListExpr .                         (rule 28)

	%eof           reduce using rule 28


State 70

	ListExpr -> Expr . ListExpr                         (rule 28)
	Expr -> Expr . Expr                                 (rule 40)
	Expr -> Expr Expr .                                 (rule 40)

	'[]'           shift, and enter state 36
			(reduce using rule 40)

	'\\'           shift, and enter state 42
			(reduce using rule 40)

	'case'         shift, and enter state 43
			(reduce using rule 40)

	L_LIdent       shift, and enter state 27
			(reduce using rule 40)

	L_True         shift, and enter state 44
			(reduce using rule 40)

	L_False        shift, and enter state 45
			(reduce using rule 40)

	%eof           reduce using rule 40
			(reduce using rule 27)


	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	ListExpr       goto state 69
	Expr           goto state 70
	List           goto state 41

State 71

	ClassDec -> 'class' UIdent . LIdent 'where' ListClassOpDec    (rule 31)

	L_LIdent       shift, and enter state 27

	LIdent         goto state 99

State 72

	InstDec -> 'instance' UIdent . 'where' ListClassOpImp    (rule 32)

	'where'        shift, and enter state 98


State 73

	ListClassOpDec -> ClassOpDec ListClassOpDec .       (rule 34)

	';'            reduce using rule 34
	'[]'           reduce using rule 34
	'\\'           reduce using rule 34
	'case'         reduce using rule 34
	'instance'     reduce using rule 34
	L_LIdent       reduce using rule 34
	L_True         reduce using rule 34
	L_False        reduce using rule 34
	%eof           reduce using rule 34


State 74

	ClassOpDec -> LIdent ':' . SType                    (rule 29)

	'Bool'         shift, and enter state 25
	'['            shift, and enter state 26
	L_UIdent       shift, and enter state 18
	L_LIdent       shift, and enter state 27

	UIdent         goto state 19
	LIdent         goto state 20
	SType          goto state 97

State 75

	ListClassOpImp -> ClassOpImp ListClassOpImp .       (rule 36)

	'[]'           reduce using rule 36
	'\\'           reduce using rule 36
	'case'         reduce using rule 36
	'instance'     reduce using rule 36
	L_LIdent       reduce using rule 36
	L_True         reduce using rule 36
	L_False        reduce using rule 36
	%eof           reduce using rule 36


State 76

	ClassOpImp -> LIdent '=' . Expr                     (rule 30)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 96
	List           goto state 41

State 77

	Expr -> Expr . Expr                                 (rule 40)
	Expr -> 'case' Expr . 'of' List '->' Expr ';' List '->' Expr    (rule 42)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	'of'           shift, and enter state 95
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 79
	List           goto state 41

State 78

	Expr -> '\\' LIdent . '->' Expr                     (rule 38)

	'->'           shift, and enter state 94


State 79

	Expr -> Expr . Expr                                 (rule 40)
	Expr -> Expr Expr .                                 (rule 40)

	';'            reduce using rule 40
	'[]'           shift, and enter state 36
			(reduce using rule 40)

	'\\'           shift, and enter state 42
			(reduce using rule 40)

	'case'         shift, and enter state 43
			(reduce using rule 40)

	'instance'     reduce using rule 40
	'of'           reduce using rule 40
	L_LIdent       shift, and enter state 27
			(reduce using rule 40)

	L_True         shift, and enter state 44
			(reduce using rule 40)

	L_False        shift, and enter state 45
			(reduce using rule 40)

	%eof           reduce using rule 40

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 79
	List           goto state 41

State 80

	List -> LIdent ':' . List                           (rule 46)

	'[]'           shift, and enter state 36
	L_LIdent       shift, and enter state 27

	LIdent         goto state 34
	List           goto state 93

State 81

	Expr -> LIdent '=' . Expr                           (rule 37)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 92
	List           goto state 41

State 82

	ListTyC -> TyC ',' . ListTyC                        (rule 51)

	'>'            reduce using rule 49
	L_UIdent       shift, and enter state 18
	%eof           reduce using rule 49

	UIdent         goto state 29
	TyC            goto state 30
	ListTyC        goto state 91

State 83

	TyC -> UIdent SType .                               (rule 47)
	SType -> SType . '->' SType                         (rule 55)

	','            reduce using rule 47
	'->'           shift, and enter state 84
	'>'            reduce using rule 47
	%eof           reduce using rule 47


State 84

	SType -> SType '->' . SType                         (rule 55)

	'Bool'         shift, and enter state 25
	'['            shift, and enter state 26
	L_UIdent       shift, and enter state 18
	L_LIdent       shift, and enter state 27

	UIdent         goto state 19
	LIdent         goto state 20
	SType          goto state 90

State 85

	SType -> SType . '->' SType                         (rule 55)
	SType -> '[' SType . ']'                            (rule 56)

	'->'           shift, and enter state 84
	']'            shift, and enter state 89


State 86

	OvType -> '<' ListTyC . '>' '=>' SType              (rule 48)

	'>'            shift, and enter state 88


State 87

	SType -> UIdent LIdent .                            (rule 53)

	','            reduce using rule 53
	'->'           reduce using rule 53
	';'            reduce using rule 53
	'>'            reduce using rule 53
	'[]'           reduce using rule 53
	'\\'           reduce using rule 53
	']'            reduce using rule 53
	'case'         reduce using rule 53
	'instance'     reduce using rule 53
	L_LIdent       reduce using rule 53
	L_True         reduce using rule 53
	L_False        reduce using rule 53
	%eof           reduce using rule 53


State 88

	OvType -> '<' ListTyC '>' . '=>' SType              (rule 48)

	'=>'           shift, and enter state 106


State 89

	SType -> '[' SType ']' .                            (rule 56)

	','            reduce using rule 56
	'->'           reduce using rule 56
	';'            reduce using rule 56
	'>'            reduce using rule 56
	'[]'           reduce using rule 56
	'\\'           reduce using rule 56
	']'            reduce using rule 56
	'case'         reduce using rule 56
	'instance'     reduce using rule 56
	L_LIdent       reduce using rule 56
	L_True         reduce using rule 56
	L_False        reduce using rule 56
	%eof           reduce using rule 56


State 90

	SType -> SType . '->' SType                         (rule 55)
	SType -> SType '->' SType .                         (rule 55)

	','            reduce using rule 55
	'->'           shift, and enter state 84
			(reduce using rule 55)

	';'            reduce using rule 55
	'>'            reduce using rule 55
	'[]'           reduce using rule 55
	'\\'           reduce using rule 55
	']'            reduce using rule 55
	'case'         reduce using rule 55
	'instance'     reduce using rule 55
	L_LIdent       reduce using rule 55
	L_True         reduce using rule 55
	L_False        reduce using rule 55
	%eof           reduce using rule 55


State 91

	ListTyC -> TyC ',' ListTyC .                        (rule 51)

	'>'            reduce using rule 51
	%eof           reduce using rule 51


State 92

	Expr -> LIdent '=' Expr .                           (rule 37)
	Expr -> Expr . Expr                                 (rule 40)

	';'            reduce using rule 37
	'[]'           shift, and enter state 36
			(reduce using rule 37)

	'\\'           shift, and enter state 42
			(reduce using rule 37)

	'case'         shift, and enter state 43
			(reduce using rule 37)

	'instance'     reduce using rule 37
	'of'           reduce using rule 37
	L_LIdent       shift, and enter state 27
			(reduce using rule 37)

	L_True         shift, and enter state 44
			(reduce using rule 37)

	L_False        shift, and enter state 45
			(reduce using rule 37)

	%eof           reduce using rule 37

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 79
	List           goto state 41

State 93

	List -> LIdent ':' List .                           (rule 46)

	'->'           reduce using rule 46
	';'            reduce using rule 46
	'[]'           reduce using rule 46
	'\\'           reduce using rule 46
	'case'         reduce using rule 46
	'instance'     reduce using rule 46
	'of'           reduce using rule 46
	L_LIdent       reduce using rule 46
	L_True         reduce using rule 46
	L_False        reduce using rule 46
	%eof           reduce using rule 46


State 94

	Expr -> '\\' LIdent '->' . Expr                     (rule 38)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 105
	List           goto state 41

State 95

	Expr -> 'case' Expr 'of' . List '->' Expr ';' List '->' Expr    (rule 42)

	'[]'           shift, and enter state 36
	L_LIdent       shift, and enter state 27

	LIdent         goto state 34
	List           goto state 104

State 96

	ClassOpImp -> LIdent '=' Expr .                     (rule 30)
	Expr -> Expr . Expr                                 (rule 40)

	'[]'           shift, and enter state 36
			(reduce using rule 30)

	'\\'           shift, and enter state 42
			(reduce using rule 30)

	'case'         shift, and enter state 43
			(reduce using rule 30)

	'instance'     reduce using rule 30
	L_LIdent       shift, and enter state 27
			(reduce using rule 30)

	L_True         shift, and enter state 44
			(reduce using rule 30)

	L_False        shift, and enter state 45
			(reduce using rule 30)

	%eof           reduce using rule 30

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 79
	List           goto state 41

State 97

	ClassOpDec -> LIdent ':' SType .                    (rule 29)
	SType -> SType . '->' SType                         (rule 55)

	'->'           shift, and enter state 84
	';'            reduce using rule 29
	'[]'           reduce using rule 29
	'\\'           reduce using rule 29
	'case'         reduce using rule 29
	'instance'     reduce using rule 29
	L_LIdent       reduce using rule 29
	L_True         reduce using rule 29
	L_False        reduce using rule 29
	%eof           reduce using rule 29


State 98

	InstDec -> 'instance' UIdent 'where' . ListClassOpImp    (rule 32)

	'[]'           reduce using rule 35
	'\\'           reduce using rule 35
	'case'         reduce using rule 35
	'instance'     reduce using rule 35
	L_LIdent       shift, and enter state 27
			(reduce using rule 35)

	L_True         reduce using rule 35
	L_False        reduce using rule 35
	%eof           reduce using rule 35

	LIdent         goto state 46
	ClassOpImp     goto state 47
	ListClassOpImp goto state 103

State 99

	ClassDec -> 'class' UIdent LIdent . 'where' ListClassOpDec    (rule 31)

	'where'        shift, and enter state 102


State 100

	ListClassDec -> ClassDec ';' ListClassDec .         (rule 24)

	'[]'           reduce using rule 24
	'\\'           reduce using rule 24
	'case'         reduce using rule 24
	'instance'     reduce using rule 24
	L_LIdent       reduce using rule 24
	L_True         reduce using rule 24
	L_False        reduce using rule 24
	%eof           reduce using rule 24


State 101

	Prog -> ListClassDec ListInstDec ListExpr .         (rule 21)

	%eof           reduce using rule 21


State 102

	ClassDec -> 'class' UIdent LIdent 'where' . ListClassOpDec    (rule 31)

	';'            reduce using rule 33
	'[]'           reduce using rule 33
	'\\'           reduce using rule 33
	'case'         reduce using rule 33
	'instance'     reduce using rule 33
	L_LIdent       shift, and enter state 27
			(reduce using rule 33)

	L_True         reduce using rule 33
	L_False        reduce using rule 33
	%eof           reduce using rule 33

	LIdent         goto state 49
	ClassOpDec     goto state 50
	ListClassOpDec goto state 109

State 103

	InstDec -> 'instance' UIdent 'where' ListClassOpImp .    (rule 32)

	'[]'           reduce using rule 32
	'\\'           reduce using rule 32
	'case'         reduce using rule 32
	'instance'     reduce using rule 32
	L_LIdent       reduce using rule 32
	L_True         reduce using rule 32
	L_False        reduce using rule 32
	%eof           reduce using rule 32


State 104

	Expr -> 'case' Expr 'of' List . '->' Expr ';' List '->' Expr    (rule 42)

	'->'           shift, and enter state 108


State 105

	Expr -> '\\' LIdent '->' Expr .                     (rule 38)
	Expr -> Expr . Expr                                 (rule 40)

	';'            reduce using rule 38
	'[]'           shift, and enter state 36
			(reduce using rule 38)

	'\\'           shift, and enter state 42
			(reduce using rule 38)

	'case'         shift, and enter state 43
			(reduce using rule 38)

	'instance'     reduce using rule 38
	'of'           reduce using rule 38
	L_LIdent       shift, and enter state 27
			(reduce using rule 38)

	L_True         shift, and enter state 44
			(reduce using rule 38)

	L_False        shift, and enter state 45
			(reduce using rule 38)

	%eof           reduce using rule 38

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 79
	List           goto state 41

State 106

	OvType -> '<' ListTyC '>' '=>' . SType              (rule 48)

	'Bool'         shift, and enter state 25
	'['            shift, and enter state 26
	L_UIdent       shift, and enter state 18
	L_LIdent       shift, and enter state 27

	UIdent         goto state 19
	LIdent         goto state 20
	SType          goto state 107

State 107

	OvType -> '<' ListTyC '>' '=>' SType .              (rule 48)
	SType -> SType . '->' SType                         (rule 55)

	'->'           shift, and enter state 84
	%eof           reduce using rule 48


State 108

	Expr -> 'case' Expr 'of' List '->' . Expr ';' List '->' Expr    (rule 42)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 110
	List           goto state 41

State 109

	ClassDec -> 'class' UIdent LIdent 'where' ListClassOpDec .    (rule 31)

	';'            reduce using rule 31
	'[]'           reduce using rule 31
	'\\'           reduce using rule 31
	'case'         reduce using rule 31
	'instance'     reduce using rule 31
	L_LIdent       reduce using rule 31
	L_True         reduce using rule 31
	L_False        reduce using rule 31
	%eof           reduce using rule 31


State 110

	Expr -> Expr . Expr                                 (rule 40)
	Expr -> 'case' Expr 'of' List '->' Expr . ';' List '->' Expr    (rule 42)

	';'            shift, and enter state 111
	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 79
	List           goto state 41

State 111

	Expr -> 'case' Expr 'of' List '->' Expr ';' . List '->' Expr    (rule 42)

	'[]'           shift, and enter state 36
	L_LIdent       shift, and enter state 27

	LIdent         goto state 34
	List           goto state 112

State 112

	Expr -> 'case' Expr 'of' List '->' Expr ';' List . '->' Expr    (rule 42)

	'->'           shift, and enter state 113


State 113

	Expr -> 'case' Expr 'of' List '->' Expr ';' List '->' . Expr    (rule 42)

	'[]'           shift, and enter state 36
	'\\'           shift, and enter state 42
	'case'         shift, and enter state 43
	L_LIdent       shift, and enter state 27
	L_True         shift, and enter state 44
	L_False        shift, and enter state 45

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 114
	List           goto state 41

State 114

	Expr -> Expr . Expr                                 (rule 40)
	Expr -> 'case' Expr 'of' List '->' Expr ';' List '->' Expr .    (rule 42)

	';'            reduce using rule 42
	'[]'           shift, and enter state 36
			(reduce using rule 42)

	'\\'           shift, and enter state 42
			(reduce using rule 42)

	'case'         shift, and enter state 43
			(reduce using rule 42)

	'instance'     reduce using rule 42
	'of'           reduce using rule 42
	L_LIdent       shift, and enter state 27
			(reduce using rule 42)

	L_True         shift, and enter state 44
			(reduce using rule 42)

	L_False        shift, and enter state 45
			(reduce using rule 42)

	%eof           reduce using rule 42

	LIdent         goto state 37
	True           goto state 38
	False          goto state 39
	Expr           goto state 79
	List           goto state 41

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 59
Number of terminals: 22
Number of non-terminals: 38
Number of states: 115

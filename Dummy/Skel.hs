-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Dummy.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Dummy.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transDTrue :: Dummy.Abs.DTrue -> Result
transDTrue x = case x of
  Dummy.Abs.DTrue string -> failure x

transDFalse :: Dummy.Abs.DFalse -> Result
transDFalse x = case x of
  Dummy.Abs.DFalse string -> failure x

transUIdent :: Dummy.Abs.UIdent -> Result
transUIdent x = case x of
  Dummy.Abs.UIdent string -> failure x

transLIdent :: Dummy.Abs.LIdent -> Result
transLIdent x = case x of
  Dummy.Abs.LIdent string -> failure x

transProg :: Dummy.Abs.Prog -> Result
transProg x = case x of
  Dummy.Abs.Dummy_Prog classdecs instdecs exprs -> failure x

transClassOpDec :: Dummy.Abs.ClassOpDec -> Result
transClassOpDec x = case x of
  Dummy.Abs.ClassOp_Dec lident stype -> failure x

transClassOpImp :: Dummy.Abs.ClassOpImp -> Result
transClassOpImp x = case x of
  Dummy.Abs.ClassOp_Imp lident expr -> failure x

transClassDec :: Dummy.Abs.ClassDec -> Result
transClassDec x = case x of
  Dummy.Abs.Class_Dec uident lident classopdecs -> failure x

transInstDec :: Dummy.Abs.InstDec -> Result
transInstDec x = case x of
  Dummy.Abs.Inst_Dec uident stype classopimps -> failure x
  Dummy.Abs.Inst_Dec_With_Constraint tyc uident stype classopimps -> failure x

transList :: Dummy.Abs.List -> Result
transList x = case x of
  Dummy.Abs.Nil -> failure x
  Dummy.Abs.Cons expr1 expr2 -> failure x

transExpr :: Dummy.Abs.Expr -> Result
transExpr x = case x of
  Dummy.Abs.Ass_Expr lident expr -> failure x
  Dummy.Abs.Abst_Expr lident expr -> failure x
  Dummy.Abs.Var_Expr lident -> failure x
  Dummy.Abs.App_Expr expr1 expr2 -> failure x
  Dummy.Abs.List_Expr list -> failure x
  Dummy.Abs.LCase_Expr expr1 list1 expr2 list2 expr3 -> failure x
  Dummy.Abs.True_Expr dtrue -> failure x
  Dummy.Abs.False_Expr dfalse -> failure x

transTyC :: Dummy.Abs.TyC -> Result
transTyC x = case x of
  Dummy.Abs.TypeConstraint uident stype -> failure x

transOvType :: Dummy.Abs.OvType -> Result
transOvType x = case x of
  Dummy.Abs.OverLoadedType tycs stype -> failure x

transSType :: Dummy.Abs.SType -> Result
transSType x = case x of
  Dummy.Abs.TVar_SType lident -> failure x
  Dummy.Abs.TCons_SType uident lident -> failure x
  Dummy.Abs.Bool_SType -> failure x
  Dummy.Abs.Arrow_SType stype1 stype2 -> failure x
  Dummy.Abs.List_SType stype -> failure x

transDType :: Dummy.Abs.DType -> Result
transDType x = case x of
  Dummy.Abs.DType_OvType ovtype -> failure x
  Dummy.Abs.DType_SType stype -> failure x

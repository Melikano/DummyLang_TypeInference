-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Dummy.

module Dummy.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Dummy.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Dummy.Abs.True where
  prt _ (Dummy.Abs.True i) = doc $ showString i
instance Print Dummy.Abs.False where
  prt _ (Dummy.Abs.False i) = doc $ showString i
instance Print Dummy.Abs.Prog where
  prt i = \case
    Dummy.Abs.Dummy_Prog classdecs instdecs defns -> prPrec i 0 (concatD [prt 0 classdecs, prt 0 instdecs, prt 0 defns])

instance Print [Dummy.Abs.ClassDec] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Dummy.Abs.InstDec] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Dummy.Abs.Defn] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Dummy.Abs.ClassOpDec where
  prt i = \case
    Dummy.Abs.ClassOp_Dec str stype -> prPrec i 0 (concatD [printString str, doc (showString ":"), prt 0 stype])

instance Print Dummy.Abs.ClassOpImp where
  prt i = \case
    Dummy.Abs.ClassOp_Imp str expr -> prPrec i 0 (concatD [printString str, doc (showString "="), prt 0 expr])

instance Print Dummy.Abs.ClassDec where
  prt i = \case
    Dummy.Abs.Class_Dec tycs str1 str2 classopdecs -> prPrec i 0 (concatD [doc (showString "class"), doc (showString "<"), prt 0 tycs, doc (showString ">"), doc (showString "=>"), printString str1, printString str2, doc (showString "where"), prt 0 classopdecs])

instance Print Dummy.Abs.InstDec where
  prt i = \case
    Dummy.Abs.Inst_Dec str stype classopimps -> prPrec i 0 (concatD [doc (showString "instance"), printString str, prt 0 stype, doc (showString "where"), prt 0 classopimps])
    Dummy.Abs.Inst_Dec_With_Constraint tycs str stype classopimps -> prPrec i 0 (concatD [doc (showString "instance"), doc (showString "<"), prt 0 tycs, doc (showString ">"), doc (showString "=>"), printString str, prt 0 stype, doc (showString "where"), prt 0 classopimps])

instance Print [Dummy.Abs.TyC] where
  prt _ [] = concatD []
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Dummy.Abs.ClassOpDec] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Dummy.Abs.ClassOpImp] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Dummy.Abs.Defn where
  prt i = \case
    Dummy.Abs.Defn_Expr str expr -> prPrec i 0 (concatD [printString str, doc (showString "="), prt 0 expr])

instance Print Dummy.Abs.Expr where
  prt i = \case
    Dummy.Abs.Abst_Expr str expr -> prPrec i 0 (concatD [doc (showString "\\"), printString str, doc (showString "->"), prt 0 expr])
    Dummy.Abs.Var_Expr str -> prPrec i 1 (concatD [printString str])
    Dummy.Abs.App_Expr expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, prt 0 expr2])
    Dummy.Abs.True_Expr true -> prPrec i 0 (concatD [prt 0 true])
    Dummy.Abs.False_Expr false -> prPrec i 0 (concatD [prt 0 false])
    Dummy.Abs.Placeholder_Expr str -> prPrec i 0 (concatD [printString str])
    Dummy.Abs.List_Expr exprs -> prPrec i 0 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])
    Dummy.Abs.INT_Expr n -> prPrec i 0 (concatD [prt 0 n])

instance Print [Dummy.Abs.Expr] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Dummy.Abs.TyC where
  prt i = \case
    Dummy.Abs.TypeConstraint str stype -> prPrec i 0 (concatD [printString str, prt 0 stype])

instance Print Dummy.Abs.OvType where
  prt i = \case
    Dummy.Abs.OverLoadedType tycs stype -> prPrec i 0 (concatD [doc (showString "<"), prt 0 tycs, doc (showString ">"), doc (showString "=>"), prt 0 stype])

instance Print Dummy.Abs.SType where
  prt i = \case
    Dummy.Abs.TVar_SType str -> prPrec i 0 (concatD [printString str])
    Dummy.Abs.TCons_SType str1 str2 -> prPrec i 0 (concatD [printString str1, printString str2])
    Dummy.Abs.Bool_SType -> prPrec i 0 (concatD [doc (showString "Bool")])
    Dummy.Abs.Arrow_SType stype1 stype2 -> prPrec i 0 (concatD [prt 0 stype1, doc (showString "->"), prt 0 stype2])
    Dummy.Abs.List_SType stype -> prPrec i 0 (concatD [doc (showString "["), prt 0 stype, doc (showString "]")])
    Dummy.Abs.Int_SType -> prPrec i 0 (concatD [doc (showString "Integer")])

instance Print Dummy.Abs.DType where
  prt i = \case
    Dummy.Abs.DType_OvType ovtype -> prPrec i 0 (concatD [prt 0 ovtype])
    Dummy.Abs.DType_SType stype -> prPrec i 0 (concatD [prt 0 stype])
